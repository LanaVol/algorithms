//Графи і пошук в ширину
// Граф - це абстрактна структура даних, що є множиною вершин і ребер, які з'єднують ці вершини

//Черга - це абстрактна структура даних з деяких елементв, що працює за принципом FIFO(first-in-first-out) - елементи додаються в кінець, а видаляються з її початку

// Задача знайти у наявному графі найкоротший шлях з однієї точки в іншу
const graph = {};
graph.a = ["b", "c"];
graph.b = ["f"];
graph.c = ["d", "e"];
graph.d = ["f"];
graph.e = ["f"];
graph.f = ["g"];

function breadthSearch(graph, start, end) {
  //створюємо граф(пустий масив), як черга в яку додаємо стартову вершину
  let queque = [];
  queque.push(start);
  //цикл, який буде працювати поки в черзі є хоча б один елемент
  while (queque.length > 0) {
    //з початку черги дістаємо поточну вершину
    const current = queque.shift();

    //якщо в графі по даній вершині нічого не знаходиться, то шляху нема і присвоємо пустий []
    if (!graph[current]) {
      graph[current] = [];
    }

    //якщо в графі по даній вершині масив включає кінцеву точку то завершуємо перевірку програми і повертаємо true
    if (graph[current].includes(end)) {
      return true;
    } else {
      //якщо умова не спрацювала то маємо додати в чергу нові вершини
      queque = [...queque, ...graph[current]];
    }
  }
}

console.log(breadthSearch(graph, "a", "t")); //true - шлях х точки а в точку g існує
